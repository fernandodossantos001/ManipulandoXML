package br.com.alura.teste;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.XMLEvent;

import br.com.alura.bean.Produto;

public class LerArquivoXML {
	private static Produto produto;
	private static List<Produto> produtos;
	public static void main(String[] args)  {
		try {
		FileInputStream fileInputStream = new FileInputStream("src/vendas.xml");
		
		XMLInputFactory factory= XMLInputFactory.newFactory();
		XMLEventReader eventos = factory.createXMLEventReader(fileInputStream);
		
		produtos = new ArrayList<Produto>();
		while (eventos.hasNext()) {
			//pega o proximo evento
			XMLEvent evento = eventos.nextEvent();
			
			// se for um produto cria o produto
			if(evento.isStartElement() && evento.asStartElement().getName().getLocalPart().equals("produto")) {
				criaProduto(eventos);
			}
		}
		produtos.forEach(p -> System.out.println( p.getAll()));
	}catch(Exception e) {
		e.printStackTrace();
	}
		
	}
	private static Produto criaProduto(XMLEventReader eventos) throws XMLStreamException {
		// TODO Auto-generated method stub
		Produto produto = new Produto();
		while (eventos.hasNext()) {
			XMLEvent evento = eventos.nextEvent();
			if (evento.isStartElement() && evento.asStartElement().getName().getLocalPart().equals("nome")) {
				evento = eventos.nextEvent();
				String nome = evento.asCharacters().getData();
				produto.setNome(nome);
			} else if (evento.isStartElement() && evento.asStartElement().getName().getLocalPart().equals("preco")) {
				evento = eventos.nextEvent();
				Double valor = Double.parseDouble(evento.asCharacters().getData());
				produto.setValor(valor);
			} else if (evento.isEndElement() && evento.asEndElement().getName().getLocalPart().equals("produto")) {
				break;
			}

		}
		
		return produto;
	}

}
